//Entire BST concepts, includes BST insertion, searching, deletion, find max, find min
#include <iostream>
#include <queue>
using namespace std;
struct Node // not struct Node*
{
    int data;
    Node *left;
    Node *right;
    Node(int data)
    {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

Node *createbst(Node *root, int value)
{
    if (root == NULL)
    {
        root = new Node(value);
        return root;
    }
    if (root->data > value)
    {
        root->left = createbst(root->left, value);
    }
    else
    {
        root->right = createbst(root->right, value);
    }
    return root;
}
void LevelOrderTraversal(Node *root)
{
    queue<Node *> q;
    q.push(root);
    q.push(NULL);
    while (!q.empty())
    {
        Node *temp = q.front();
        q.pop();
        if (temp == NULL)
        {
            cout << endl;
            if (!q.empty())
            {
                q.push(NULL);
            }
        }
        else // temp not NULL
        {
            cout << temp->data;
            if (temp->left)
            {
                q.push(temp->left);
            }
            if (temp->right)
            {
                q.push(temp->right);
            }
        }
    }
}
bool searchbst(Node *root, int value)
{
    if (root == NULL) // reached NULL but no value found or initially NULL
    {
        return false;
    }
    if (root->data == value)
    {
        return true;
    }

    if (root->data > value)
    {
        return searchbst(root->left, value); // sign of Traversal
    }
    else
    {
        return searchbst(root->right, value); // sign of Traversal
    }
}
int isMaxfromBST(Node *root)
{
    if (root == NULL)
    {
        return -1;
    }
    Node *temp = root;
    while (temp->right != NULL)
    {
        temp = temp->right;
    }
    return temp->data;
}
int isMinfromBST(Node *root)
{
    if (root == NULL)
    {
        return -1;
    }
    Node *temp = root;
    while (temp->left != NULL)
    {
        temp = temp->left;
    }
    return temp->data;
}
Node *deletebst(Node *root, int value)
{
    if (root == NULL)
    {
        return NULL;
    }
    if (root->data == value)
    {
        // 0 Child
        //     5  root
        //    / \
    // NULL  NULL
        if (root->left == NULL && root->right == NULL)
        {
            delete root;
            return NULL;
        }
        // 1 Child
        // 1 Child on left subtree
        //    5  root
        //   / \
    //  4    NULL temp=4
        if (root->left != NULL && root->right == NULL)
        {
            Node *temp = root->left;
            delete root;
            return temp;
        }
        // 1 Child on right subtree
        //     5  root
        //    / \
    // NULL  6 temp=6
        if (root->left == NULL && root->right != NULL)
        {
            Node *temp = root->right;
            delete root;
            return temp;
        }
        // 2 Child
        //      9  root
        //     / \
    //    8   20 temp=20
        //   /    / \
    //  3    15  21
        // Method 1 : delete min from right subtree ||  Method 2 : max from left subtree
        if (root->left != NULL && root->right != NULL)
        {
            // Method 1
            //  int mini = isMinfromBST(root->right);
            //  root->data = mini;
            //  root->right = deletebst(root->right, mini);
            //  return root;
            //  or Method 2
            int maxi = isMaxfromBST(root->left);
            root->data = maxi;
            root->left = deletebst(root->left, maxi);
            return root;
        }
    }
    else if (root->data > value)
    {
        root->left = deletebst(root->left, value);
        return root;
    }
    else
    {
        root->right = deletebst(root->right, value);
        return root;
    }
    return root;
}
int main()
{
    Node *root = NULL;
    cout << "Enter bst values : " << endl;
    int val;
    cin >> val;
    while (val != -1)
    {
        root = createbst(root, val);
        cin >> val;
    }

    cout << "LOT IS : " << endl;
    LevelOrderTraversal(root);
    // 10 8 21 7 27 5 4 3 - 1
    cout << "Which value would you like to find : " << endl;
    int d;
    cin >> d;
    bool b = searchbst(root, d);
    cout << b << endl;
    cout << "Which value would you like to delete : " << endl;
    int d2;
    cin >> d2;
    root = deletebst(root, d2);
    cout << "Ans : " << endl;
    LevelOrderTraversal(root);
}

