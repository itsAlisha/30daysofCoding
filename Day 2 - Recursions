//TC : O(n), SC:O(N)

// Problem 0 : Basic Recursion
#include<iostream>
using namespace std;

/*
void function(int n){
    if(n==5){
        return;
    }
cout<<n<<endl;
n++;
function(n);
}

int main(){
int num=0;
function(num);
}
*/


//Problem 1 : Print name 5 times
/*
void printname(string name, int count){
    if(count>5){ //1>5  2>5 3>5 4>5 5>5
        return;
    }
    cout<<name<<count<<endl;
    count++;
    printname(name,count);
}

int main(){
    printname("Alisha",1);
}
*/

//Problem 2 : Print linearly from 1-N
/*
void printnum(int count,int number){
    if(count>number){
        return;
    }
    cout<<count<<endl;
    count++;
    printnum(count,number);
}
int main(){
    cout<<"Enter a number : "<<endl;
    int n;
    cin>>n;
    int count=1;
    printnum(count,n);
}
*/

//Problem 3 : Print from N-1
/*
void printnumdec(int number){
    if(number==0){
        return;
    }
    cout<<number<<endl;
    number--;
    printnumdec(number);
}
int main(){
    cout<<"Enter a number : "<<endl;
    int n;
    cin>>n;
    printnumdec(n);
}
*/

//Problem 4 - Print from 1-N by backtrack  linearly from 1,2,3,4,5 if N=5, then use number-- so after backtrack it starts from 0
/*
void printnum(int number){
    if(number<=0){   //5<0  4<0  3<0  2<0  1<0  {0<=0 return}
        return;
    }
    number--;
    printnum(number);
    cout<<number+1;
}
int main(){
    cout<<"Enter a number : "<<endl;
    int n;
    cin>>n;
    printnum(n);
}
*/
//Problem 5 - Print from N->1 by backtrack
/*
void printnum(int number, int c){
    if(c==number){   //5<0  4<0  3<0  2<0  1<0  {0<=0 return}
        return;
    }
    c++;
    printnum(number,c);
    cout<<c;
}
int main(){
    cout<<"Enter a number : "<<endl;
    int n,c;
    cin>>n;
    c=0;
    printnum(n,c);
}
*/
//Problem - 6 : Sum of first n numbers //Parameterized Recursion
/*
void sum(int n, int total){
    if(n<1){
        cout<<total;
        return;
    }
    total+=n;
    sum(n-1,total);
}
int main(){
    cout<<"Enter a number : "<<endl;
    int n;
    cin>>n;
    sum(n,0);
}
*/
//Problem - 6 : Sum of first n numbers //Functional Recursion
/*
int sum(int n){
    if(n<1){
        return 0;
    }
    return n+sum(n-1);
}
int main(){
    cout<<"Enter a number : "<<endl;
    int n;
    cin>>n;
    int k=sum(n);
    cout<<k;
}
*/
//Problem 7 : Factorial using functional
/*
int fact(int n){
    if(n==0){
        return 1;
    }
    return n*fact(n-1);
}
int main(){
    cout<<"Enter a number : "<<endl;
    int n;
    cin>>n;
    int k=fact(n);
    cout<<k;
}
*/
//Problem 8 : Factorial using Parameterized
/*
void fact(int n,int f){
    if(n==0){
        cout<<f;
        return;
    }
    fact(n-1,f*n);
}
int main(){
    cout<<"Enter a number : "<<endl;
    int n;
    cin>>n;
    fact(n,1);
}
*/
// Problem 9 : Reverse array -> Functional, 2 pointer
/*
void reverse(int n,int arr[], int i, int j){
    if(i>=j){
        return;
    }
    swap(arr[i],arr[j]);
    reverse(n,arr, i+1,j-1);
}
int main(){
    int n=5;
    int arr[n]={1,2,3,4,2};
    reverse(n,arr,0,n-1);
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}
*/
// Problem 10 : Reverse array -> Functional, 1 pointer
/*void reverse(int n,int arr[], int i){
    if(i==n/2){
        return;
    }
    swap(arr[i],arr[n-i-1]);
    reverse(n,arr, i+1);
}
int main(){
    int n=6;
    int arr[n]={1,2,3,4,2,7};
    reverse(n,arr,0);
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}
*/
//Problem 11 : Given string is Palindrome or not
/*bool Palindrome(string name, int i, int n){
    if(i==n/2){
        return true;
    }
   
    if(name[i]!=name[n-i-1])
    {
        return false;
    }
    return Palindrome(name, i+1, n);
}
int main(){
    string name="alisha";
    int n=name.length();
    cout<<Palindrome(name,0,n);
}
*/
//Problem 12 : Fibonacci number - multiple recursion calls TC=O(2^n)
/*
int Fibonacci(int n){
    if(n<=1){
        return n;
    }
return Fibonacci(n-1)+Fibonacci(n-2);
}
int main(){
    int n=7;
    cout<<Fibonacci(n);
}
*/
