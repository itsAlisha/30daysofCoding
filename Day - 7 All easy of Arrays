//Wached Striver a2z yt series for these 2 Ques Types: 

//Longest Subarray with sum k incuding 0's
#include <bits/stdc++.h> 
int getLongestSubarray(vector<int>& nums, int k){
    // Write your code here
    unordered_map<int,int>mp; //map sum of arr to index
    int len=0;
    int sum=0;
    int i=0;
    while (i<nums.size()) {
      sum += nums[i]; //sum was already finding length including 0s too
      if(sum==k){
        len=max(len,i+1);
      }
      if (mp.find(sum - k) != mp.end()) {
        len = max(len, i - mp[sum - k]);
      }
      if (mp.find(sum) == mp.end()){ // not there previously
        mp[sum] = i;  //it means that earlier 0's sum index mapping wasn't done, now it is done
    }
      i++;
    }
    return len;
}

//Longest Subarray with sum k
#include<bits/stdc++.h>>
int longestSubarrayWithSumK(vector<int> a, long long k) {
    // Write your code here
    //Approach 1
    /*
    int sum=0;
    int len=0;
    for(int i=0;i<a.size();i++){
        for(int j=i;j<a.size();j++){
          sum=0;
          for (int p = i; p <= j; p++) {
            sum += a[p];
          }
            if(sum==k){
                len=max(len,j-i+1);
            }
        }
    }
    return len;
}
*/
//Approach 2 - Hashmaps
/*
    unordered_map<int,int>mp; //map sum of arr to index
    int len=0;
    int sum=0;
    int i=0;
    while (i<a.size()) {
      sum += a[i]; //sum was already finding length including 0s too
      if(sum==k){
        len=max(len,i+1);
      }
      if (mp.find(sum - k) != mp.end()) {
        len = max(len, i - mp[sum - k]);
      }
      if (mp.find(sum) == mp.end()) { // not there previously
        mp[sum] = i; // it means that earlier 0's sum index mapping wasn't done,
                     // now it is done
      }
      i++;
    }
    return len;
}
*/
//Approach -3 - Greedy
int len=0;
int left=0,right=0;
long long sum=a[0];
int n=a.size();
while (right < n) {
  while (sum > k && left <= right) { // remove
  sum-=a[left];
  left++;
  }
  if(sum==k){
    len=max(len,right-left+1);
  }
  right++;
  if(right<n){
    sum+=a[right];
  }
}
return len;
}
