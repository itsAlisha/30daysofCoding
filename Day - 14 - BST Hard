//size of largest BST
/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/
class info{
    public :
    int maxi;
    int mini;
    bool isBST;
    int size;
};
info solve(TreeNode * root, int &sizee){
    if(root==NULL){
        return {INT_MIN,INT_MAX,true,0};
    }
    info left=solve(root->left,sizee);
    info right=solve(root->right,sizee);

    info currNode;
    currNode.maxi=max(right.maxi,root->data);
    currNode.mini=min(left.mini,root->data);
    currNode.size=left.size+right.size+1;

    if (left.isBST && right.isBST && left.maxi < root->data && root->data < right.mini) {
        currNode.isBST=true;
    } else {
        currNode.isBST = false;
    }
    if(currNode.isBST){
        sizee=max(sizee,currNode.size);
    }
    return currNode;
    }

int largestBST(TreeNode * root){
    // Write your code here.
    int BSTsize=0;
    info ans=solve(root,BSTsize);
    return BSTsize;
}
